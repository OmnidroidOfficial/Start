@page "/start_2"
@using Blazored.LocalStorage;
@using Omnidroid_Start.Shared;
@inject NavigationManager UriHelper3
@inject ILocalStorageService _local

<PageTitle>Start - Adaptation of Language</PageTitle>

<h1>Adaptation of Language</h1>

<p hidden="@oneUnhidden">Omnidroid aspires to use language that is adapted to your exact preferences.</p>
<br />
<p hidden="@oneUnhidden">Please select your gender.</p>
<select class="form-control" @bind="@SelectedGenderID" hidden="@oneUnhidden">
    @foreach (var gender in ListGenders)
    {
        <option value="@gender.IDRefGen2">@gender.IDPrintName2</option>
    }
</select>
<p hidden="@oneUnhidden">Your current reference: @SelectedGenderID.</p>
<button class="btn-primary" hidden="@oneUnhidden" @onclick="@revNxtOne">Back</button>
<button class="btn-primary" hidden="@oneUnhidden" @onclick="@HideOne">Next</button>

<p hidden="@twoUnhidden">In this section the primary terms that are used to address you are configured.</p>
<br/>
<input hidden="@twoUnhidden" @bind="InputLastName" @bind:event="oninput" placeholder="Last Name" />
<p hidden="@twoUnhidden">Please enter your last name and follow the instructions below.</p>
<EditForm Model="@Model1" OnSubmit="@SubmitModel1" hidden="@twoUnhidden">
    <p>Select the options that suit your credentials.</p>
    <div>
        <label>
            <InputCheckbox @bind-Value="Model1!.IfModuleMarried" />
            "I am Married."
        </label>
    </div>
    <div>
        <label>
            <InputCheckbox @bind-Value="Model1!.IfModuleTitledProfession" />
            "My Title(s) is (are) Related to My Profession."
        </label>
    </div>
    <div>
        <label>
            <InputCheckbox @bind-Value="Model1!.IfModuleDescent" />
            "My Title(s) is (are) Related to My Descent."
        </label>
    </div>
    <p hidden="@oneNote">Please make sure that the last name that you have entered here is your maiden name.</p>

    <button type="submit">Update</button>
</EditForm>
<p hidden="@twoUnhidden">"@SummaryModel1"</p>
<br/>
<button class="btn-primary" hidden="@twoUnhidden" @onclick="@revNxtTwo">Back</button>
<button class="btn-primary" hidden="@twoUnhidden" @onclick="@HideTwo">Next</button>

<p hidden="@threeUnhidden">In this section, the basic structure of your legal name is customized. (Excluding the definition of 'other'.)</p>
<p hidden="@revItemViewOne, @threeUnhidden">There is nothing for you to declare in this section.</p>

<div style="margin-bottom:5px" hidden="@threeUnhidden">
    <label>
        Enter a custom prefix.
        <input @bind="@InputTerms1Prefix" @bind:event="oninput" placeholder="Prefix" />
    </label>
</div>
<div style="margin-bottom:5px" hidden="@threeUnhidden">
    <label>
        Enter a custom suffix.
        <input @bind="@InputTerms1Suffix" @bind:event="oninput" placeholder="Suffix" />
    </label>
</div>
<div style="margin-bottom:5px" hidden="@itemViewTwo">
        <label>
            Please enter the name that you have married.
            <input @bind="@SuffixNotMaidenName" hidden="@itemViewTwo" @bind:event="oninput" placeholder="MarriedName" />
        </label>
    </div>
<p>Welcome to Omnidroid, @InputTerms1Prefix @SelectedGenderID @InputLastName@SuffixNotMaidenName @InputTerms1Suffix.</p>
<button class="btn-primary" hidden="@threeUnhidden" @onclick="@revNxtThree">Back</button>
<button class="btn-primary" hidden="@threeUnhidden" @onclick="@HideThree">Next</button>


@code{
    string? selectedGenderID;

    public string SelectedGenderID
    {
        get => selectedGenderID ?? "";
        set { selectedGenderID = value; }
    }

    List<Gender> ListGenders = new List<Gender>() { new Gender("female", "Miss", "Female", "Female"), new Gender("male", "Mister", "Male", "Male"), new Gender("other", "(To be further specified)", "Other", "Other: Further details follow during advanced configuration.") };

    public class Gender
    {
        public Gender(string id2_name, string id2_refgen, string id2_label, string id2_name_forprint)
        {
            IDLabel2 = id2_label;
            IDRefGen2 = id2_refgen;
            IDName2 = id2_name;
            IDPrintName2 = id2_name_forprint;
        }

        public string? IDLabel2 { get; set; }
        public string? IDRefGen2 { get; set; }
        public string? IDName2 { get; set; }
        public string? IDPrintName2 { get; set; }
    }

    private static bool oneUnhidden { get; set; } = false;
    private void revNxtOne()
    {
        UriHelper3.NavigateTo("introduction_1");
    }

    private static bool twoUnhidden { get; set; } = true;
    private void HideOne()
    {
        _local.SetItemAsStringAsync("SelectedGenderID_local", SelectedGenderID);
        oneUnhidden = !oneUnhidden;
        GetGender();
        twoUnhidden = !twoUnhidden;
    }

    private bool oneNote { get; set; } = true;

    private void GetGender()
    {
        if (SelectedGenderID == "Miss")
        {
            oneNote = false;
        }
    }

    public string? InputLastName { get; set; }

    public class Section1
    {
        public bool IfModuleMarried { get; set; }
        public bool IfModuleDescent { get; set; }
        public bool IfModuleTitledProfession { get; set; }
    }

    public Section1? Model1 { get; set; }

    protected override void OnInitialized() => Model1 ??= new();

    public string? SummaryModel1 { get; set; }

    static public string? ifModuleDescent_localstring;
    static public string? ifModuleTitledProfession_localstring;
    static public string? ifModuleMarried_localstring;

    static public bool? ifModuleDescent_local;
    static public bool? ifModuleTitledProfession_local;
    static public bool? ifModuleMarried_local;

    public string? str1SummaryModel1;
    public string? str2SummaryModel1;
    public string? str3SummaryModel1;

    public void GetSummaryModel1()
    {
        if (ifModuleMarried_local == true)
        {
            str1SummaryModel1 = "is married, ";
        }
        else
        {
            str1SummaryModel1 = "is not married, ";
        }

        if (ifModuleTitledProfession_local == true)
        {
            str2SummaryModel1 = "uses a professional title ";
        }
        else
        {
            str2SummaryModel1 = "does not use a professional title ";
        }

        if (ifModuleDescent_local == true)
        {
            str3SummaryModel1 = "and uses a title based on descent";
        }
        else
        {
            str3SummaryModel1 = "and does not use a title based on descent";
        }
    }

    void SubmitModel1()
    {
        ifModuleDescent_localstring = Model1?.IfModuleDescent.ToString();
        ifModuleTitledProfession_localstring = Model1?.IfModuleTitledProfession.ToString();
        ifModuleMarried_localstring = Model1?.IfModuleMarried.ToString();

        ifModuleDescent_local = Convert.ToBoolean(ifModuleDescent_localstring);
        ifModuleTitledProfession_local = Convert.ToBoolean(ifModuleTitledProfession_localstring);
        ifModuleMarried_local = Convert.ToBoolean(ifModuleMarried_localstring);

        GetSummaryModel1();

        SummaryModel1 = SelectedGenderID + " " + InputLastName + " " + str1SummaryModel1 + " " + str2SummaryModel1 + " " + str3SummaryModel1 + ".";
    }

    void revNxtTwo()
    {
        oneUnhidden = !oneUnhidden;
        twoUnhidden = !twoUnhidden;
    }

    static private bool threeUnhidden { get; set; } = true;

    void HideTwo()
    {
        _local.SetItemAsync("InputLastName_local", InputLastName);
        _local.SetItemAsync("ifModuleDescent_local", ifModuleDescent_local);
        _local.SetItemAsync("ifModuleTitledProfession_local", ifModuleTitledProfession_local);
        _local.SetItemAsync("ifModuleMarried_local", ifModuleMarried_local);
        twoUnhidden = !twoUnhidden;
        oneNote = true;
        SetSuffixField();
        threeUnhidden = !threeUnhidden;
    }

    public bool itemViewOne { get; set; } = true;
    public bool itemViewTwo { get; set; } = true;
    public bool revItemViewOne { get; set; } = false;

    void SetSuffixField()
    {
        if (ifModuleDescent_local == false && ifModuleTitledProfession_local == false && ifModuleMarried_local == false)
        {
            itemViewOne = true;
            revItemViewOne = false;

        }
        else
        {
            itemViewOne = false;
            revItemViewOne = true;
        }
        CheckMaidenName();
    }

    void CheckMaidenName()
    {
        if (SelectedGenderID == "Miss" && ifModuleMarried_local == true)
        {
            SelectedGenderID = "Mrs";
            itemViewTwo = false;
        }
        else if (SelectedGenderID != "Miss" && ifModuleMarried_local != true)
        {
            itemViewTwo = true;
        }
    }

    static public string? InputTerms1Prefix {get; set;}
    static public string? InputTerms1Suffix {get; set;}
    static public string? NotMaidenName { get; set; }

    public string? SuffixNotMaidenName = "-" + NotMaidenName;

    void HideThree()
    {
        _local.SetItemAsync("NotMaidenName_local", NotMaidenName);
        _local.SetItemAsync("InputTerms1Prefix_local", InputTerms1Prefix);
        _local.SetItemAsync("InputTerms1Suffix_local", InputTerms1Suffix);
        NxtTwo();
    }

    void NxtTwo()
    {
        PreSort.VarA = SelectedGenderID;
        UriHelper3.NavigateTo("start_3");
    }

    void revNxtThree()
    {
        threeUnhidden = !threeUnhidden;
        twoUnhidden = !twoUnhidden;
    }
}
